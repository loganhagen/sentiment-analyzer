# This file is a template, and might need editing before it works on your project.
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Nodejs.gitlab-ci.yml

# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/node/tags/
image: node:16-alpine

stages:
  - build
  - lint
  - test
  - staging
  - production

# build_frontend:
#   stage: build
#   script:
#     - cd ./frontend
#     - npm install

# lint_frontend:
#   stage: lint
#   script:
#     - cd ./frontend
#     - npm install
#     - npm run format
#     - npm run lint
#   dependencies:
#     - build_frontend
#   allow_failure: false

# test_frontend:
#   stage: test
#   script:
#     - cd ./frontend
#     - npm install
#     - npm run test:unit
#   dependencies:
#     - build_frontend
#   allow_failure: false

# build_backend:
#   image: python:3.10.10-slim
#   stage: build
#   script:
#     - cd ./backend
#     - pip install --upgrade pip
#     - pip --no-cache-dir install -r requirements.txt
#   allow_failure: false

# lint_backend:
#   image: python:3.10.10-slim
#   stage: lint
#   script:
#     - cd ./backend
#     - pip install --upgrade pip
#     - pip --no-cache-dir install -r requirements.txt
#     - cd ..
#     - pylint --rcfile backend/.pylintrc backend/
#   dependencies:
#     - build_backend
#   allow_failure: false

# test_backend:
#   image: python:3.10.10-slim
#   stage: test
#   variables:
#     MONGO_USERNAME: "root"
#     MONGO_PASSWORD: "root"
#     MONGO_HOSTNAME: "mongo"
#     MONGO_PORT: "27017"
#     BEARER_TOKEN: "AAAAAAAAAAAAAAAAAAAAAFvZlQEAAAAAKJ2aLLYYPFSQyRsPgwSonDACeT0%3DwJjK63Eys0ixVHxTaYjTs9eBgOIOrDkOKytKcixt1m4WX3X4Yi"
#     REDDIT_USERNAME: "Complex_Worry2833"
#     REDDIT_PASSWORD: "Xa99bu94Eu6g"
#     CLIENT_ID: "IeTiyJnJ3tE1ntCIz0dcyw"
#     SECRET_TOKEN: "Rzttejco5MDht_FpCWJZxUv_CMyFtw"
#     FLASK_APP: "app.py"
#     DB_TEST: '1'
#   script:
#     - cd ./backend
#     - pip install --upgrade pip
#     - pip --no-cache-dir install -r requirements.txt
#     - python -m pytest src/test/
#   dependencies:
#     - build_backend
#   allow_failure: false

build_staging_frontend:
  stage: staging
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug # GitLab recommends using the debug version of kaniko
    entrypoint: [""] # The entrypoint needs to be overridden, for the build script to run

  # The script that will be run to build the docker image. We don't have to change much here if you all followed the lab setup
  # The dollar sign values are predefined environment variables that are set by GitLab
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend:${CI_COMMIT_TAG}"
  allow_failure: false
  dependencies: []

  # The rules for when this job will run.
  # We only want this job to run when we push to the staging branch otherwise we never run this
  # Once the job is completed, the docker images will be pushed to the gitlab registry which can be found
  # under Packages & Registries -> Container Registry: https://gitlab.socs.uoguelph.ca/3760W23/demogroup/three_container_stack/container_registry/
  # rules:
  #   - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
  #     when: always
  #   - when: never

# Similar to the frontend job, we will be building the backend docker image
build_staging_backend:
  stage: staging
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/backend:${CI_COMMIT_TAG}"
  allow_failure: false
  dependencies: []
  # rules:
  #   - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
  #     when: always
  #   - when: never

build_staging_mongo:
  stage: staging
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/mongodb"
      --dockerfile "${CI_PROJECT_DIR}/mongodb/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/mongo:${CI_COMMIT_TAG}"
  allow_failure: false
  dependencies: []
  # rules:
  #   - if: $CI_COMMIT_BRANCH == "staging" && $CI_PIPELINE_SOURCE == "push"
  #     when: always
  #   - when: never

# We will create a similar setup for a production branch
build_production_frontend:
  stage: production
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend:production"
  allow_failure: false
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == "production" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never

build_production_backend:
  stage: production
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/backend"
      --dockerfile "${CI_PROJECT_DIR}/backend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/backend:production"
  allow_failure: false
  dependencies: []
  # https://docs.gitlab.com/ee/ci/jobs/job_control.html#avoid-duplicate-pipelines
  rules:
    - if: $CI_COMMIT_BRANCH == "production" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never

build_production_mongo:
  stage: production
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/mongodb"
      --dockerfile "${CI_PROJECT_DIR}/mongodb/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/mongo:production"
  allow_failure: false
  dependencies: []
  rules:
    - if: $CI_COMMIT_BRANCH == "production" && $CI_PIPELINE_SOURCE == "push"
      when: always
    - when: never
